name: Build wheels for all platforms

on:
  push:
    tags: ["v*"]

jobs:

  build-linux:
    name: Build on Linux
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Build wheels
        uses: pypa/cibuildwheel@v3.1.1
        env:
          CIBW_BUILD: cp311-manylinux_x86_64 cp312-manylinux_x86_64 cp313-manylinux_x86_64
          CIBW_BEFORE_BUILD_LINUX: |
            yum install -y epel-release
            yum install -y armadillo-devel lapack-devel blas-devel cmake ninja-build pkgconfig
          CIBW_BEFORE_BUILD: |
            pip install meson-python pybind11 ninja meson
          CIBW_ENVIRONMENT_LINUX: >
            PKG_CONFIG_PATH=/usr/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig
          CIBW_TEST_REQUIRES: numpy scipy pytest
          CIBW_TEST_COMMAND: pytest {project}/tests

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux
          path: ./wheelhouse/*.whl

  build-macos:
    name: Build on macOS
    runs-on: macos-14
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Setup Miniforge
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          activate-environment: fastlr-env
          use-mamba: true

      - name: Get Date
        id: get-date
        run: echo "::set-output name=today::$(/bin/date -u '+%Y%m%d')"
        shell: bash

      - name: Cache Conda env
        uses: actions/cache@v4
        with:
          path: ${{ env.CONDA }}/envs
          key:
            conda-${{ runner.os }}--${{ runner.arch }}--${{
            steps.get-date.outputs.today }}-${{
            hashFiles('etc/fastlr-environment-macos.yml') }}-${{
            env.CACHE_NUMBER }}
        env:
          # Increase this value to reset cache if environment yml has not changed
          CACHE_NUMBER: 0
        id: cach

      - name: Update environment
        run: conda env update -n fastlr-env -f etc/fastlr-environment-macos.yml
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.1.1
        env:
          CIBW_BEFORE_BUILD: |
            brew install armadillo openblas
          CIBW_BUILD: cp311-macosx_arm64 cp312-macosx_arm64 cp313-macosx_arm64
          CIBW_ENVIRONMENT_MACOS: >-
            MACOSX_DEPLOYMENT_TARGET=14.0
            CC=/opt/homebrew/bin/gcc-15
            CXX=/opt/homebrew/bin/g++-15
            LDFLAGS="-L/opt/homebrew/opt/openblas/lib"
            CPPFLAGS="-I/opt/homebrew/opt/openblas/include"
            PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig:/opt/homebrew/opt/openblas/lib/pkgconfig"
            VERBOSE=1
          CIBW_BUILD_VERBOSITY: 3
          CIBW_TEST_REQUIRES: numpy scipy pytest
          CIBW_TEST_COMMAND: pytest {project}/tests

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos
          path: ./wheelhouse/*.whl

  build-windows:
    name: Build on windows
    runs-on: windows-2022
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Setup Miniforge
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          activate-environment: fastlr-env
          use-mamba: true

      - name: Get Date
        id: get-date
        run: echo "::set-output name=today::$(/bin/date -u '+%Y%m%d')"
        shell: bash

      - name: Cache Conda env
        uses: actions/cache@v4
        with:
          path: ${{ env.CONDA }}/envs
          key:
            conda-${{ runner.os }}--${{ runner.arch }}--${{
            steps.get-date.outputs.today }}-${{
            hashFiles('etc/fastlr-environment.yml') }}-${{
            env.CACHE_NUMBER }}
        env:
          CACHE_NUMBER: 0
        id: cache

      - name: Update environment
        run:
          conda env update -n fastlr-env -f etc/fastlr-environment.yml
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Try building wheels windows
        shell: bash -l {0}
        env:
          CIBW_BUILD: cp311-win_amd64 cp312-win_amd64 cp313-win_amd64
          CIBW_TEST_REQUIRES: numpy scipy pytest
          CIBW_TEST_COMMAND: pytest {project}/tests
        run: |
          conda activate fastlr-env
          pip install -r etc/requirements.txt
          pip list
          bash scripts/build_wheel_window.sh \
            'C:/Users/runneradmin/miniconda3/envs/fastlr-env' \
            'D:/a/fastlr/fastlr/native.ini' 

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows
          path: ./wheelhouse/*.whl

  build-sdist-linux:
    name: Build sdist on Linux
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y libarmadillo-dev libopenblas-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools build wheel pybind11

      - name: Build sdist
        run: python -m build --sdist --outdir wheelhouse/

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: ./wheelhouse/*.tar.gz

  upload-to-gh-release:
    name: Upload all wheels to release
    runs-on: ubuntu-22.04
    needs: [build-linux, build-macos, build-windows, build-sdist-linux]

    environment: pypi
    permissions:
      id-token: write

    steps:
      - name: Download Linux wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-linux
          path: dist

      - name: Download macOS wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-macos
          path: dist

      - name: Download Windows wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-windows
          path: dist

      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: List downloaded files
        run: ls -lh dist

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.whl
          token: ${{ secrets.GH_PAT }}

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
